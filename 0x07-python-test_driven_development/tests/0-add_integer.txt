The ``0-add_integer`` module
=====================

Using ``add_integer``
_____________________

#1 Impor the function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

#2 Check docstring module:
    >>> doc_module = __import__("0-add_integer").__doc__
    >>> len(doc_module.splitlines()) > 4
    True

#3 Check docstring of the function:
    >>> doc_module = __import__("0-add_integer").add_integer.__doc__
    >>> len(doc_module.splitlines()) > 2
    True

#4 test add two integers:
    >>> add_integer(2, 2)
    4

#5 test add a string and integer:
    >>> add_integer("a", 4)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

#6 test add a integer and string:
    >>> add_integer(2, 'a')
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

#7 Test add float and integer:
    >>> add_integer(2.5, 2)
    4

#8 Test add integer and float:
    >>> add_integer (5, 10.5)
    15

#9 only value string for 'a':
    >>> add_integer('h')
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

#10 Test of the main:
    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

    >>> add_integer(2)
    100

    >>> add_integer(100.3, -2)
    98

    >>> add_integer(4, "School")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

#11 Check PEP 8 style:
    >>> import os
    >>> os.popen("pep8 0-add_integer.py").read()
    ''

