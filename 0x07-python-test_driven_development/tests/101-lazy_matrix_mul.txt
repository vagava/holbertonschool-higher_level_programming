=========================================
=      Test `101-lazy_matrix_mul`       =
=========================================


______________________________________________________

- Seccion to check import, documentation and README  -
______________________________________________________

#1 import function fom the module
    >>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

#2 Check docstring module:
    >>> doc_module = __import__("101-lazy_matrix_mul").__doc__
    >>> len(doc_module.splitlines()) > 4
    True

#3 Check docstring of the function:
    >>> doc_module = __import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__
    >>> len(doc_module.splitlines()) > 2
    True

#4 Check PEP 8 style:
    >>> import os
    >>> os.popen("pep8 101-lazy_matrix_mul.py").read()
    ''

#5 Check README file:
    >>> current_wd = os.getcwd()
    >>> path_readme = current_wd + "/README.md"
    >>> os.path.exists(path_readme)
    True

______________________________________________________

-      Seccion to check function requirements        -
______________________________________________________

#6 m_a must be an list
    >>> lazy_matrix_mul(None, [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'

#6 m_b must be an list
    >>> lazy_matrix_mul([[1, 2],[3, 4]], None)
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'

#7 m_a must be a list of lists
    >>> lazy_matrix_mul([[5, 6],{7, 8}], [[1, 2],[3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for *: 'set' and 'int'

#8 m_b must be a list of lists
    >>> lazy_matrix_mul([[1, 2],[3, 4]], [[5, 6],{7, 8}])
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for *: 'int' and 'set'

#9 if m_a is empty []
    >>> lazy_matrix_mul([], [[1, 2],[3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

#10 if m_a is empty [[]]
    >>> lazy_matrix_mul([[]], [[1, 2],[3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

#11 if m_b is empty []
    >>> lazy_matrix_mul([[1, 2],[3, 4]], [])
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

#12 if m_b is empty [[]]
    >>> lazy_matrix_mul([[1, 2],[3, 4]], [[]])
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

#13 all elements of a lists of the m_a must be a integers or float
    >>> lazy_matrix_mul([[5, 6], ['int', 8]], [[1, 2],[3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: data type must provide an itemsize

#14 all elements of a lists of the m_b must be a integers or float
    >>> lazy_matrix_mul([[1, 2],[3, 4]], [[5, 6], ['int', 8]])
    Traceback (most recent call last):
        ...
    ValueError: data type must provide an itemsize

#15 all rows of the m_a must be the same size
    >>> lazy_matrix_mul([[5, 6], [7, 8, 9]], [[1, 2],[3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: setting an array element with a sequence.

#16 all rows of the m_b must be the same size
    >>> lazy_matrix_mul([[1, 2],[3, 4]], [[5, 6], [7, 8, 9]])
    Traceback (most recent call last):
        ...
    ValueError: setting an array element with a sequence.

#17 number of elements of the list in the matrix A must be equal to number of lists of matrix B.
    >>> lazy_matrix_mul([[5, 3, 4], [8, 1, 0]], [[1, 4],[5, 3]])
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

______________________________________________________

-      Seccion to check the main of the proyect      -
______________________________________________________

#18
    >>> lazy_matrix_mul([[1, "Hello"], [[5, 6], [7, 8]])
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

#19
    >>> lazy_matrix_mul([[5, 6], [7, 8]], [[1, "Hello"])
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

#20
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, "Hello"], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: data type must provide an itemsize

#21
    >>> lazy_matrix_mul([[1, "Hello"], [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: data type must provide an itemsize


______________________________________________________

-            Seccion to check edge cases             -
______________________________________________________

